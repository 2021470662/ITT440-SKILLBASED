#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

int main() {
    int server_fd, client_fd;
    struct sockaddr_in server_addr, client_addr;
    socklen_t client_len = sizeof(client_addr);

    // Create socket
    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == -1) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    // Bind to an IP and port
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(8484);
    server_addr.sin_addr.s_addr = INADDR_ANY;

    if (bind(server_fd, (struct sockaddr *)&server_addr, sizeof(server_addr)) == -1) {
        perror("Binding failed");
        close(server_fd);
        exit(EXIT_FAILURE);
    }

    // Listen for incoming connections
    if (listen(server_fd, 1) == -1) {
        perror("Listening failed");
        close(server_fd);
        exit(EXIT_FAILURE);
    }

    printf("Server is listening for incoming connections...\n");

    // Accept a client connection
    if ((client_fd = accept(server_fd, (struct sockaddr *)&client_addr, &client_len)) == -1) {
        perror("Accepting failed");
        close(server_fd);
        exit(EXIT_FAILURE);
    }

    // Generate a random number between 100 and 999
    int random_number = rand() % 900 + 100;

    // Send the random number to the client
    if (send(client_fd, &random_number, sizeof(random_number), 0) == -1) {
        perror("Sending failed");
    } else {
        printf("Sent random number: %d\n", random_number);
    }

    // Close sockets
    close(client_fd);
    close(server_fd);

    return 0;
}
